# Generated by Django 4.2.2 on 2023-07-04 16:09

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("questions", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                ("author_id", models.AutoField(primary_key=True, serialize=False)),
                ("author_name", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "Authors",
            },
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=50)),
                ("last_name", models.CharField(max_length=50)),
                ("email", models.EmailField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="JobField",
            fields=[
                ("info_id", models.AutoField(primary_key=True, serialize=False)),
                ("info_title", models.CharField(max_length=50)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Journal",
            fields=[
                ("journal_id", models.AutoField(primary_key=True, serialize=False)),
                ("journal_name", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "Journal",
                "db_table_comment": "Contains the ids and names of article journals",
            },
        ),
        migrations.CreateModel(
            name="OpenProblems",
            fields=[
                (
                    "question_id",
                    models.AutoField(default=None, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "contact",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="questions.contact",
                    ),
                ),
                (
                    "parent_question",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="questions.openproblems",
                    ),
                ),
            ],
            options={
                "db_table": "Current-questions",
                "db_table_comment": "These are the current questions that we have accepted from the submitted questions",
            },
        ),
        migrations.CreateModel(
            name="Organisation",
            fields=[
                ("info_id", models.AutoField(primary_key=True, serialize=False)),
                ("info_title", models.CharField(max_length=50)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProblemRelation",
            fields=[
                ("QR_id", models.AutoField(primary_key=True, serialize=False)),
                ("QR_title", models.CharField(max_length=100)),
                ("QR_description", models.TextField(blank=True)),
            ],
            options={
                "db_table": "Question-relations",
                "db_table_comment": "This contains information about how a question/submitted question is related to a question",
            },
        ),
        migrations.CreateModel(
            name="Reference",
            fields=[
                ("ref_id", models.AutoField(primary_key=True, serialize=False)),
                ("ref_title", models.CharField(max_length=100)),
                ("full_citation", models.TextField()),
                ("doi", models.CharField(max_length=50)),
                ("relevance", models.PositiveSmallIntegerField()),
                ("publish_date", models.DateField()),
                ("isbn", models.TextField()),
                ("authors", models.ManyToManyField(to="questions.author")),
                (
                    "journal_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="questions.journal",
                    ),
                ),
            ],
            options={
                "db_table": "References",
                "db_table_comment": "Cotains all reference information",
            },
        ),
        migrations.CreateModel(
            name="RefType",
            fields=[
                ("rtype_id", models.AutoField(primary_key=True, serialize=False)),
                ("rtype_class", models.CharField(max_length=50)),
                ("class_description", models.TextField()),
            ],
            options={
                "db_table": "Reference-type",
                "db_table_comment": "A cyclic table that contains all types of references, the self-joini relation is to indicate whether one reference type is a subcategory of another.",
            },
        ),
        migrations.CreateModel(
            name="Species",
            fields=[
                ("species_id", models.AutoField(primary_key=True, serialize=False)),
                ("genus", models.CharField(max_length=50, null=True)),
                ("species", models.CharField(max_length=50, null=True)),
            ],
            options={
                "db_table": "Species",
            },
        ),
        migrations.CreateModel(
            name="SubmittedProblems",
            fields=[
                (
                    "question_id",
                    models.AutoField(default=None, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("species", models.CharField(blank=True, max_length=50, null=True)),
                ("citation", models.TextField(blank=True)),
                ("first_name", models.CharField(blank=True, max_length=50)),
                ("last_name", models.CharField(blank=True, max_length=50)),
                ("email", models.EmailField(blank=True, max_length=50, null=True)),
                ("job_field", models.CharField(blank=True, max_length=100)),
                ("organisation", models.CharField(blank=True, max_length=100)),
                (
                    "contact",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="questions.contact",
                    ),
                ),
                (
                    "parent_question",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="questions.openproblems",
                    ),
                ),
                (
                    "reference",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="questions.reference",
                    ),
                ),
            ],
            options={
                "db_table": "Submitted-questions",
                "db_table_comment": "These are the submitted questions from users that will undergo review",
            },
        ),
        migrations.CreateModel(
            name="RelatedProblem",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("relation_rate", models.IntegerField(blank=True, null=True)),
                (
                    "QR_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="questions.problemrelation",
                    ),
                ),
                (
                    "child_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="child_relation",
                        to="questions.openproblems",
                    ),
                ),
                (
                    "parent_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="parent_relation",
                        to="questions.openproblems",
                    ),
                ),
            ],
            options={
                "db_table": "Related-questions",
                "db_table_comment": "This contains the parent-child relationships between questions. Hierarchical data.",
            },
        ),
        migrations.CreateModel(
            name="QuestionReference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="questions.openproblems",
                    ),
                ),
                (
                    "reference_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="questions.reference",
                    ),
                ),
            ],
            options={
                "db_table": "Questions-references",
                "db_table_comment": "Table containing which references are tied to which questions",
            },
        ),
        migrations.CreateModel(
            name="ProblemSpecies",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="questions.openproblems",
                    ),
                ),
                (
                    "species_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="questions.species",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="openproblems",
            name="reference",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="questions.reference",
            ),
        ),
        migrations.AddField(
            model_name="contact",
            name="job_field",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="questions.jobfield",
            ),
        ),
        migrations.AddField(
            model_name="contact",
            name="organisation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="questions.organisation",
            ),
        ),
    ]
